/**
 * @file Firestore Security Rules for BeMatch application.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model, ensuring that users can only access and modify data associated with their own user ID.
 * @dataStructure All data is nested under /users/{userId}, creating a clear hierarchy that simplifies access control. Matches and messages are stored as subcollections, maintaining the user-centric organization.
 * @keySecurityDecisions Listing of users is disallowed.  Write operations are restricted to authenticated users and must adhere to the ownership model.
 *
 * @denormalizationForAuthorization  The data structure inherently supports authorization independence, eliminating the need for additional `get()` calls.  The `userId` is embedded in the path, making ownership checks simple and efficient.
 * @structuralSegregation N/A - All user data is private and stored under the `/users/{userId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1' can create their own profile.
     * @allow (get, update, delete) User 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1' can get, update, or delete their own profile.
     * @deny (create) User 'attackerId' cannot create a profile with userId 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1'.
     * @deny (get, update, delete) User 'attackerId' cannot get, update, or delete user 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for matches of a user.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create) User 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1' can create matches within their profile.
     * @allow (get, list, update, delete) User 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1' can get, list, update, or delete matches within their profile.
     * @deny (create) User 'attackerId' cannot create matches within user 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1' profile.
     * @deny (get, list, update, delete) User 'attackerId' cannot get, list, update, or delete matches within user 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1' profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/matches/{matchId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for chat messages within a match.
     * @path /users/{userId}/matches/{matchId}/messages/{messageId}
     * @allow (create) User 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1' can create messages within their matches.
     * @allow (get, list, update, delete) User 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1' can get, list, update, or delete messages within their matches.
     * @deny (create) User 'attackerId' cannot create messages within user 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1' matches.
     * @deny (get, list, update, delete) User 'attackerId' cannot get, list, update, or delete messages within user 'yRYfOjIHP7dP2mZoMVMbzTt3cbg1' matches.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/matches/{matchId}/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}