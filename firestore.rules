rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can read, update and delete their own profile.
     * @deny (create) Authenticated user cannot create profile for another user.
     * @deny (get, update, delete) Authenticated user cannot read, update and delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to match documents for a specific user.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create) Authenticated user can create a match under their user ID.
     * @allow (get, list, update, delete) Authenticated user can read, list, update and delete matches under their user ID.
     * @deny (create) Authenticated user cannot create match under another user ID.
     * @deny (get, list, update, delete) Authenticated user cannot read, list, update and delete matches under another user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/matches/{matchId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat message documents within a specific match for a user.
     * @path /users/{userId}/matches/{matchId}/messages/{messageId}
     * @allow (create) Authenticated user can create a chat message under their user ID and match ID.
     * @allow (get, list, update, delete) Authenticated user can read, list, update and delete chat messages under their user ID and match ID.
     * @deny (create) Authenticated user cannot create chat message under another user ID or match ID.
     * @deny (get, list, update, delete) Authenticated user cannot read, list, update and delete chat messages under another user ID or match ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/matches/{matchId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}