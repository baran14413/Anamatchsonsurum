/**
 * @file Firestore Security Rules for BeMatch application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Each user has exclusive
 *   access to their data, stored under their unique Firebase Authentication UID.
 *
 * @data_structure The database is structured as follows:
 *   - /users/{userId}: User profiles, where {userId} is the Firebase Authentication UID.
 *   - /users/{userId}/matches/{matchId}: Matches for a specific user.
 *   - /users/{userId}/matches/{matchId}/messages/{messageId}: Chat messages within a match.
 *
 * @key_security_decisions
 *   - User listing is disallowed.
 *   - All data is nested under /users/{userId} to enforce ownership.
 *   - Rules are designed to be authorization independent, avoiding `get()` calls.
 *
 * @denormalization_for_authorization N/A.  The data structure is designed to
 *   avoid the need for denormalization. Authorization is based solely on the
 *   `request.auth.uid` and path-based ownership.
 *
 * @structural_segregation N/A. No data is considered both private and public.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the owner can read and write their profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document if the userId matches their UID.
     * @allow (get, update, delete) User with UID 'user123' can get, update, or delete their profile document if the userId matches their UID.
     * @deny (create, get, update, delete) User with UID 'user456' cannot create, get, update, or delete the profile document for user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for matches. Only the owner can read and write their matches.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create) User with UID 'user123' can create a match document under their user ID.
     * @allow (get, update, delete) User with UID 'user123' can get, update, or delete a match document under their user ID.
     * @deny (create, get, update, delete) User with UID 'user456' cannot create, get, update, or delete a match document under user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/matches/{matchId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for chat messages. Only the owner can read and write their chat messages.
     * @path /users/{userId}/matches/{matchId}/messages/{messageId}
     * @allow (create) User with UID 'user123' can create a message document under their user ID and match ID.
     * @allow (get, update, delete) User with UID 'user123' can get, update, or delete a message document under their user ID and match ID.
     * @deny (create, get, update, delete) User with UID 'user456' cannot create, get, update, or delete a message document under user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/matches/{matchId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}