
{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user's profile within the BeMatch application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "firebaseUid": {
          "type": "string",
          "description": "The Firebase Authentication UID associated with this user."
        },
        "fullName": {
          "type": "string",
          "description": "The user's full name."
        },
        "dateOfBirth": {
          "type": "string",
          "description": "The user's date of birth.",
          "format": "date-time"
        },
        "gender": {
          "type": "string",
          "description": "The user's gender."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "profilePictureUrl": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        },
        "interests": {
          "type": "array",
          "description": "A list of the user's interests.",
          "items": {
            "type": "string"
          }
        },
        "bio": {
          "type": "string",
          "description": "A short biography or description of the user."
        }
      },
      "required": [
        "id",
        "firebaseUid",
        "fullName",
        "dateOfBirth",
        "gender",
        "email"
      ]
    },
    "Match": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Match",
      "type": "object",
      "description": "Represents a match between two users.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Match entity."
        },
        "user1Id": {
          "type": "string",
          "description": "Reference to UserProfile 1. (Relationship: UserProfile 1:N Match)"
        },
        "user2Id": {
          "type": "string",
          "description": "Reference to UserProfile 2. (Relationship: UserProfile 1:N Match)"
        },
        "timestamp": {
          "type": "string",
          "description": "The date and time when the match occurred.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "user1Id",
        "user2Id",
        "timestamp"
      ]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a single message within a chat conversation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ChatMessage entity."
        },
        "matchId": {
          "type": "string",
          "description": "Reference to Match. (Relationship: Match 1:N ChatMessage)"
        },
        "senderId": {
          "type": "string",
          "description": "Reference to UserProfile who sent the message. (Relationship: UserProfile 1:N ChatMessage)"
        },
        "text": {
          "type": "string",
          "description": "The text content of the message."
        },
        "timestamp": {
          "type": "string",
          "description": "The date and time when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "matchId",
        "senderId",
        "text",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/profile",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile data. Access is restricted to the user identified by {userId} and admins.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase UID of the user."
            }
          ]
        }
      },
      {
        "path": "/matches/{matchId}",
        "definition": {
          "entityName": "Match",
          "schema": {
            "$ref": "#/backend/entities/Match"
          },
          "description": "Stores match data between two users.",
          "params": [
            {
              "name": "matchId",
              "description": "The unique ID of the match."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/matches/{matchId}",
        "definition": {
          "entityName": "Match",
          "schema": {
            "$ref": "#/backend/entities/Match"
          },
          "description": "Stores denormalized match data for easy querying and access control by a specific user. Includes denormalized 'user1Id' and 'user2Id' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase UID of the user."
            },
            {
              "name": "matchId",
              "description": "The unique ID of the match."
            }
          ]
        }
      },
      {
        "path": "/matches/{matchId}/messages/{messageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Stores chat messages for a specific match.  Access is controlled by match membership.",
          "params": [
            {
              "name": "matchId",
              "description": "The unique ID of the match."
            },
            {
              "name": "messageId",
              "description": "The unique ID of the chat message."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support BeMatch's core features, focusing on user profiles, matches, and real-time chat.  The structure emphasizes authorization independence and optimized query capabilities.\n\n1.  **User Profiles:** `/users/{userId}/profile` stores individual user profiles. This path-based ownership ensures that only the user (or an admin) can access their profile data.  Authorization is simplified as it directly correlates to the authenticated user ID.\n\n2.  **Matches:** `/matches/{matchId}` stores match data.  Each match document contains `user1Id` and `user2Id` to identify the matched users.  To ensure queryable access to matches for a given user, a subcollection `/users/{userId}/matches/{matchId}` is used. Here, the `user1Id` and `user2Id` are DENORMALIZED into documents within each user's subcollection of matches, providing Authorization Independence and making it straightforward to securely list matches for a specific user without requiring complex `get()` calls in security rules (QAP).\n\n3.  **Chat Messages:** `/matches/{matchId}/messages/{messageId}` stores chat messages associated with a match. This structure is highly secure because access to messages is implicitly controlled by the match. Only users who are part of a match should be able to read or write messages within that match.\n\nThis design prioritizes structural segregation by storing user-specific data under `/users/{userId}` and match-specific data under `/matches/{matchId}`. This segregation ensures that each collection has a homogeneous security posture, simplifying security rules and improving maintainability. The denormalization strategy for matches addresses authorization independence, removing the need for `get()` calls in security rules and supporting robust atomic operations."
  }
}
